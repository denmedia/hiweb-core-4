let deepMerge={isMergeableObject:function(a){let nonNullObject=a&&typeof a==="object";return nonNullObject&&Object.prototype.toString.call(a)!=="[object RegExp]"&&Object.prototype.toString.call(a)!=="[object Date]"},emptyTarget:function(a){return Array.isArray(a)?[]:{}},cloneIfNecessary:function(b,a){let clone=a&&a.clone===true;return(clone&&deepMerge.isMergeableObject(b))?deepMerge.deepmerge(deepMerge.emptyTarget(b),b,a):b},defaultArrayMerge:function(c,b,a){let destination=c.slice();b.forEach(function(f,d){if(typeof destination[d]==="undefined"){destination[d]=deepMerge.cloneIfNecessary(f,a)}else{if(deepMerge.isMergeableObject(f)){destination[d]=deepMerge.deepmerge(c[d],f,a)}else{if(c.indexOf(f)===-1){destination.push(deepMerge.cloneIfNecessary(f,a))}}}});return destination},mergeObject:function(c,b,a){let destination={};if(deepMerge.isMergeableObject(c)){Object.keys(c).forEach(function(d){destination[d]=deepMerge.cloneIfNecessary(c[d],a)})}Object.keys(b).forEach(function(d){if(!deepMerge.isMergeableObject(b[d])||!c[d]){destination[d]=deepMerge.cloneIfNecessary(b[d],a)}else{destination[d]=deepMerge.deepmerge(c[d],b[d],a)}});return destination},deepmerge:function(c,b,a){let array=Array.isArray(b);let options=a||{arrayMerge:deepMerge.defaultArrayMerge};let arrayMerge=options.arrayMerge||deepMerge.defaultArrayMerge;if(array){return Array.isArray(c)?arrayMerge(c,b,a):deepMerge.cloneIfNecessary(b,a)}else{return deepMerge.mergeObject(c,b,a)}},all:function deepmergeAll(b,a){if(!Array.isArray(b)||b.length<2){throw new Error("first argument should be an array with at least two elements")}return b.reduce(function(d,c){return deepMerge.deepmerge(d,c,a)})}};